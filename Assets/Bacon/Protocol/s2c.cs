// Generated by sprotodump. DO NOT EDIT!
// source: ./../../../tool/s2c.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace S2cSprotoType { 
	public class call {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private List<opinfo> _opcodes; // tag 0
			public List<opinfo> opcodes {
				get { return _opcodes; }
				set { base.has_field.set_field (0, true); _opcodes = value; }
			}
			public bool HasOpcodes {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.opcodes = base.deserialize.read_obj_list<opinfo> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.opcodes, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class deal {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 6;
			
			
			private Int64 _firstidx; // tag 0
			public Int64 firstidx {
				get { return _firstidx; }
				set { base.has_field.set_field (0, true); _firstidx = value; }
			}
			public bool HasFirstidx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _firsttake; // tag 1
			public Int64 firsttake {
				get { return _firsttake; }
				set { base.has_field.set_field (1, true); _firsttake = value; }
			}
			public bool HasFirsttake {
				get { return base.has_field.has_field (1); }
			}

			private List<Int64> _p1; // tag 2
			public List<Int64> p1 {
				get { return _p1; }
				set { base.has_field.set_field (2, true); _p1 = value; }
			}
			public bool HasP1 {
				get { return base.has_field.has_field (2); }
			}

			private List<Int64> _p2; // tag 3
			public List<Int64> p2 {
				get { return _p2; }
				set { base.has_field.set_field (3, true); _p2 = value; }
			}
			public bool HasP2 {
				get { return base.has_field.has_field (3); }
			}

			private List<Int64> _p3; // tag 4
			public List<Int64> p3 {
				get { return _p3; }
				set { base.has_field.set_field (4, true); _p3 = value; }
			}
			public bool HasP3 {
				get { return base.has_field.has_field (4); }
			}

			private List<Int64> _p4; // tag 5
			public List<Int64> p4 {
				get { return _p4; }
				set { base.has_field.set_field (5, true); _p4 = value; }
			}
			public bool HasP4 {
				get { return base.has_field.has_field (5); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.firstidx = base.deserialize.read_integer ();
						break;
					case 1:
						this.firsttake = base.deserialize.read_integer ();
						break;
					case 2:
						this.p1 = base.deserialize.read_integer_list ();
						break;
					case 3:
						this.p2 = base.deserialize.read_integer_list ();
						break;
					case 4:
						this.p3 = base.deserialize.read_integer_list ();
						break;
					case 5:
						this.p4 = base.deserialize.read_integer_list ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.firstidx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.firsttake, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.p1, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.p2, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.p3, 4);
				}

				if (base.has_field.has_field (5)) {
					base.serialize.write_integer (this.p4, 5);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class dice {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _first; // tag 0
			public Int64 first {
				get { return _first; }
				set { base.has_field.set_field (0, true); _first = value; }
			}
			public bool HasFirst {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _firsttake; // tag 1
			public Int64 firsttake {
				get { return _firsttake; }
				set { base.has_field.set_field (1, true); _firsttake = value; }
			}
			public bool HasFirsttake {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _d1; // tag 2
			public Int64 d1 {
				get { return _d1; }
				set { base.has_field.set_field (2, true); _d1 = value; }
			}
			public bool HasD1 {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _d2; // tag 3
			public Int64 d2 {
				get { return _d2; }
				set { base.has_field.set_field (3, true); _d2 = value; }
			}
			public bool HasD2 {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.first = base.deserialize.read_integer ();
						break;
					case 1:
						this.firsttake = base.deserialize.read_integer ();
						break;
					case 2:
						this.d1 = base.deserialize.read_integer ();
						break;
					case 3:
						this.d2 = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.first, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.firsttake, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.d1, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.d2, 3);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class gang {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 6;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _code; // tag 1
			public Int64 code {
				get { return _code; }
				set { base.has_field.set_field (1, true); _code = value; }
			}
			public bool HasCode {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _card; // tag 2
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (2, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _hor; // tag 3
			public Int64 hor {
				get { return _hor; }
				set { base.has_field.set_field (3, true); _hor = value; }
			}
			public bool HasHor {
				get { return base.has_field.has_field (3); }
			}

			private Int64 _dian; // tag 4
			public Int64 dian {
				get { return _dian; }
				set { base.has_field.set_field (4, true); _dian = value; }
			}
			public bool HasDian {
				get { return base.has_field.has_field (4); }
			}

			private Int64 _chip; // tag 5
			public Int64 chip {
				get { return _chip; }
				set { base.has_field.set_field (5, true); _chip = value; }
			}
			public bool HasChip {
				get { return base.has_field.has_field (5); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.code = base.deserialize.read_integer ();
						break;
					case 2:
						this.card = base.deserialize.read_integer ();
						break;
					case 3:
						this.hor = base.deserialize.read_integer ();
						break;
					case 4:
						this.dian = base.deserialize.read_integer ();
						break;
					case 5:
						this.chip = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.code, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.card, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.hor, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.dian, 4);
				}

				if (base.has_field.has_field (5)) {
					base.serialize.write_integer (this.chip, 5);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class handshake {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class hu {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private List<huinfo> _hus; // tag 0
			public List<huinfo> hus {
				get { return _hus; }
				set { base.has_field.set_field (0, true); _hus = value; }
			}
			public bool HasHus {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.hus = base.deserialize.read_obj_list<huinfo> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.hus, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class huinfo : SprotoTypeBase {
		private static int max_field_count = 6;
		
		
		private Int64 _idx; // tag 0
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (0, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _card; // tag 1
		public Int64 card {
			get { return _card; }
			set { base.has_field.set_field (1, true); _card = value; }
		}
		public bool HasCard {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _code; // tag 2
		public Int64 code {
			get { return _code; }
			set { base.has_field.set_field (2, true); _code = value; }
		}
		public bool HasCode {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _jiao; // tag 3
		public Int64 jiao {
			get { return _jiao; }
			set { base.has_field.set_field (3, true); _jiao = value; }
		}
		public bool HasJiao {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _dian; // tag 4
		public Int64 dian {
			get { return _dian; }
			set { base.has_field.set_field (4, true); _dian = value; }
		}
		public bool HasDian {
			get { return base.has_field.has_field (4); }
		}

		private Int64 _chip; // tag 5
		public Int64 chip {
			get { return _chip; }
			set { base.has_field.set_field (5, true); _chip = value; }
		}
		public bool HasChip {
			get { return base.has_field.has_field (5); }
		}

		public huinfo () : base(max_field_count) {}

		public huinfo (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.idx = base.deserialize.read_integer ();
					break;
				case 1:
					this.card = base.deserialize.read_integer ();
					break;
				case 2:
					this.code = base.deserialize.read_integer ();
					break;
				case 3:
					this.jiao = base.deserialize.read_integer ();
					break;
				case 4:
					this.dian = base.deserialize.read_integer ();
					break;
				case 5:
					this.chip = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.idx, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.card, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.code, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.jiao, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.dian, 4);
			}

			if (base.has_field.has_field (5)) {
				base.serialize.write_integer (this.chip, 5);
			}

			return base.serialize.close ();
		}
	}


	public class join {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private player _p; // tag 0
			public player p {
				get { return _p; }
				set { base.has_field.set_field (0, true); _p = value; }
			}
			public bool HasP {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.p = base.deserialize.read_obj<player> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.p, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class lead {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _card; // tag 1
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (1, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.card, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class leave {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private player _p; // tag 0
			public player p {
				get { return _p; }
				set { base.has_field.set_field (0, true); _p = value; }
			}
			public bool HasP {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.p = base.deserialize.read_obj<player> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.p, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class match {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _id; // tag 0
			public Int64 id {
				get { return _id; }
				set { base.has_field.set_field (0, true); _id = value; }
			}
			public bool HasId {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.id = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.id, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class opinfo : SprotoTypeBase {
		private static int max_field_count = 7;
		
		
		private Int64 _idx; // tag 0
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (0, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _countdown; // tag 1
		public Int64 countdown {
			get { return _countdown; }
			set { base.has_field.set_field (1, true); _countdown = value; }
		}
		public bool HasCountdown {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _card; // tag 2
		public Int64 card {
			get { return _card; }
			set { base.has_field.set_field (2, true); _card = value; }
		}
		public bool HasCard {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _dian; // tag 3
		public Int64 dian {
			get { return _dian; }
			set { base.has_field.set_field (3, true); _dian = value; }
		}
		public bool HasDian {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _peng; // tag 4
		public Int64 peng {
			get { return _peng; }
			set { base.has_field.set_field (4, true); _peng = value; }
		}
		public bool HasPeng {
			get { return base.has_field.has_field (4); }
		}

		private Int64 _gang; // tag 5
		public Int64 gang {
			get { return _gang; }
			set { base.has_field.set_field (5, true); _gang = value; }
		}
		public bool HasGang {
			get { return base.has_field.has_field (5); }
		}

		private huinfo _hu; // tag 6
		public huinfo hu {
			get { return _hu; }
			set { base.has_field.set_field (6, true); _hu = value; }
		}
		public bool HasHu {
			get { return base.has_field.has_field (6); }
		}

		public opinfo () : base(max_field_count) {}

		public opinfo (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.idx = base.deserialize.read_integer ();
					break;
				case 1:
					this.countdown = base.deserialize.read_integer ();
					break;
				case 2:
					this.card = base.deserialize.read_integer ();
					break;
				case 3:
					this.dian = base.deserialize.read_integer ();
					break;
				case 4:
					this.peng = base.deserialize.read_integer ();
					break;
				case 5:
					this.gang = base.deserialize.read_integer ();
					break;
				case 6:
					this.hu = base.deserialize.read_obj<huinfo> ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.idx, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.countdown, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.card, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.dian, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.peng, 4);
			}

			if (base.has_field.has_field (5)) {
				base.serialize.write_integer (this.gang, 5);
			}

			if (base.has_field.has_field (6)) {
				base.serialize.write_obj (this.hu, 6);
			}

			return base.serialize.close ();
		}
	}


	public class over {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private List<settlement> _settle; // tag 0
			public List<settlement> settle {
				get { return _settle; }
				set { base.has_field.set_field (0, true); _settle = value; }
			}
			public bool HasSettle {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.settle = base.deserialize.read_obj_list<settlement> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.settle, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _index; // tag 2
		public Int64 index {
			get { return _index; }
			set { base.has_field.set_field (2, true); _index = value; }
		}
		public bool HasIndex {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _version; // tag 3
		public Int64 version {
			get { return _version; }
			set { base.has_field.set_field (3, true); _version = value; }
		}
		public bool HasVersion {
			get { return base.has_field.has_field (3); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				case 2:
					this.index = base.deserialize.read_integer ();
					break;
				case 3:
					this.version = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.index, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.version, 3);
			}

			return base.serialize.close ();
		}
	}


	public class peng {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _card; // tag 1
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (1, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _code; // tag 2
			public Int64 code {
				get { return _code; }
				set { base.has_field.set_field (2, true); _code = value; }
			}
			public bool HasCode {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _hor; // tag 3
			public Int64 hor {
				get { return _hor; }
				set { base.has_field.set_field (3, true); _hor = value; }
			}
			public bool HasHor {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.card = base.deserialize.read_integer ();
						break;
					case 2:
						this.code = base.deserialize.read_integer ();
						break;
					case 3:
						this.hor = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.card, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.code, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.hor, 3);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class player : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private string _name; // tag 0
		public string name {
			get { return _name; }
			set { base.has_field.set_field (0, true); _name = value; }
		}
		public bool HasName {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _idx; // tag 1
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (1, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _sid; // tag 2
		public Int64 sid {
			get { return _sid; }
			set { base.has_field.set_field (2, true); _sid = value; }
		}
		public bool HasSid {
			get { return base.has_field.has_field (2); }
		}

		public player () : base(max_field_count) {}

		public player (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.name = base.deserialize.read_string ();
					break;
				case 1:
					this.idx = base.deserialize.read_integer ();
					break;
				case 2:
					this.sid = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_string (this.name, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.idx, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.sid, 2);
			}

			return base.serialize.close ();
		}
	}


	public class radio {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _board; // tag 0
			public string board {
				get { return _board; }
				set { base.has_field.set_field (0, true); _board = value; }
			}
			public bool HasBoard {
				get { return base.has_field.has_field (0); }
			}

			private string _adver; // tag 1
			public string adver {
				get { return _adver; }
				set { base.has_field.set_field (1, true); _adver = value; }
			}
			public bool HasAdver {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.board = base.deserialize.read_string ();
						break;
					case 1:
						this.adver = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.board, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.adver, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class rcard {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _num; // tag 0
			public Int64 num {
				get { return _num; }
				set { base.has_field.set_field (0, true); _num = value; }
			}
			public bool HasNum {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.num = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.num, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class rchat {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _type; // tag 1
			public Int64 type {
				get { return _type; }
				set { base.has_field.set_field (1, true); _type = value; }
			}
			public bool HasType {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _textid; // tag 2
			public Int64 textid {
				get { return _textid; }
				set { base.has_field.set_field (2, true); _textid = value; }
			}
			public bool HasTextid {
				get { return base.has_field.has_field (2); }
			}

			private string _sdsteam; // tag 3
			public string sdsteam {
				get { return _sdsteam; }
				set { base.has_field.set_field (3, true); _sdsteam = value; }
			}
			public bool HasSdsteam {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.type = base.deserialize.read_integer ();
						break;
					case 2:
						this.textid = base.deserialize.read_integer ();
						break;
					case 3:
						this.sdsteam = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.type, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.textid, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_string (this.sdsteam, 3);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class ready {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class restart {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class roomover {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class settlement : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private Int64 _idx; // tag 0
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (0, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _points; // tag 1
		public Int64 points {
			get { return _points; }
			set { base.has_field.set_field (1, true); _points = value; }
		}
		public bool HasPoints {
			get { return base.has_field.has_field (1); }
		}

		private List<settlementitem> _li; // tag 2
		public List<settlementitem> li {
			get { return _li; }
			set { base.has_field.set_field (2, true); _li = value; }
		}
		public bool HasLi {
			get { return base.has_field.has_field (2); }
		}

		public settlement () : base(max_field_count) {}

		public settlement (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.idx = base.deserialize.read_integer ();
					break;
				case 1:
					this.points = base.deserialize.read_integer ();
					break;
				case 2:
					this.li = base.deserialize.read_obj_list<settlementitem> ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.idx, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.points, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_obj (this.li, 2);
			}

			return base.serialize.close ();
		}
	}


	public class settlementitem : SprotoTypeBase {
		private static int max_field_count = 5;
		
		
		private Int64 _code; // tag 0
		public Int64 code {
			get { return _code; }
			set { base.has_field.set_field (0, true); _code = value; }
		}
		public bool HasCode {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _hucode; // tag 1
		public Int64 hucode {
			get { return _hucode; }
			set { base.has_field.set_field (1, true); _hucode = value; }
		}
		public bool HasHucode {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _multi; // tag 2
		public Int64 multi {
			get { return _multi; }
			set { base.has_field.set_field (2, true); _multi = value; }
		}
		public bool HasMulti {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _points; // tag 3
		public Int64 points {
			get { return _points; }
			set { base.has_field.set_field (3, true); _points = value; }
		}
		public bool HasPoints {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _aim; // tag 4
		public Int64 aim {
			get { return _aim; }
			set { base.has_field.set_field (4, true); _aim = value; }
		}
		public bool HasAim {
			get { return base.has_field.has_field (4); }
		}

		public settlementitem () : base(max_field_count) {}

		public settlementitem (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.code = base.deserialize.read_integer ();
					break;
				case 1:
					this.hucode = base.deserialize.read_integer ();
					break;
				case 2:
					this.multi = base.deserialize.read_integer ();
					break;
				case 3:
					this.points = base.deserialize.read_integer ();
					break;
				case 4:
					this.aim = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.code, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.hucode, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.multi, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.points, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.aim, 4);
			}

			return base.serialize.close ();
		}
	}


	public class shuffle {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 5;
			
			
			private Int64 _first; // tag 0
			public Int64 first {
				get { return _first; }
				set { base.has_field.set_field (0, true); _first = value; }
			}
			public bool HasFirst {
				get { return base.has_field.has_field (0); }
			}

			private List<Int64> _p1; // tag 1
			public List<Int64> p1 {
				get { return _p1; }
				set { base.has_field.set_field (1, true); _p1 = value; }
			}
			public bool HasP1 {
				get { return base.has_field.has_field (1); }
			}

			private List<Int64> _p2; // tag 2
			public List<Int64> p2 {
				get { return _p2; }
				set { base.has_field.set_field (2, true); _p2 = value; }
			}
			public bool HasP2 {
				get { return base.has_field.has_field (2); }
			}

			private List<Int64> _p3; // tag 3
			public List<Int64> p3 {
				get { return _p3; }
				set { base.has_field.set_field (3, true); _p3 = value; }
			}
			public bool HasP3 {
				get { return base.has_field.has_field (3); }
			}

			private List<Int64> _p4; // tag 4
			public List<Int64> p4 {
				get { return _p4; }
				set { base.has_field.set_field (4, true); _p4 = value; }
			}
			public bool HasP4 {
				get { return base.has_field.has_field (4); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.first = base.deserialize.read_integer ();
						break;
					case 1:
						this.p1 = base.deserialize.read_integer_list ();
						break;
					case 2:
						this.p2 = base.deserialize.read_integer_list ();
						break;
					case 3:
						this.p3 = base.deserialize.read_integer_list ();
						break;
					case 4:
						this.p4 = base.deserialize.read_integer_list ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.first, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.p1, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.p2, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.p3, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.p4, 4);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class take_restart {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class take_turn {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _your_turn; // tag 0
			public Int64 your_turn {
				get { return _your_turn; }
				set { base.has_field.set_field (0, true); _your_turn = value; }
			}
			public bool HasYour_turn {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _countdown; // tag 1
			public Int64 countdown {
				get { return _countdown; }
				set { base.has_field.set_field (1, true); _countdown = value; }
			}
			public bool HasCountdown {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _type; // tag 2
			public Int64 type {
				get { return _type; }
				set { base.has_field.set_field (2, true); _type = value; }
			}
			public bool HasType {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _card; // tag 3
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (3, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.your_turn = base.deserialize.read_integer ();
						break;
					case 1:
						this.countdown = base.deserialize.read_integer ();
						break;
					case 2:
						this.type = base.deserialize.read_integer ();
						break;
					case 3:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.your_turn, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.countdown, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.type, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.card, 3);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class take_xuanpao {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _countdown; // tag 0
			public Int64 countdown {
				get { return _countdown; }
				set { base.has_field.set_field (0, true); _countdown = value; }
			}
			public bool HasCountdown {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.countdown = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.countdown, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class take_xuanque {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _countdown; // tag 0
			public Int64 countdown {
				get { return _countdown; }
				set { base.has_field.set_field (0, true); _countdown = value; }
			}
			public bool HasCountdown {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _your_turn; // tag 1
			public Int64 your_turn {
				get { return _your_turn; }
				set { base.has_field.set_field (1, true); _your_turn = value; }
			}
			public bool HasYour_turn {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _card; // tag 2
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (2, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.countdown = base.deserialize.read_integer ();
						break;
					case 1:
						this.your_turn = base.deserialize.read_integer ();
						break;
					case 2:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.countdown, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.your_turn, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.card, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class xuanpao {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _fen; // tag 1
			public Int64 fen {
				get { return _fen; }
				set { base.has_field.set_field (1, true); _fen = value; }
			}
			public bool HasFen {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.fen = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.fen, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class xuanque {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _que; // tag 1
			public Int64 que {
				get { return _que; }
				set { base.has_field.set_field (1, true); _que = value; }
			}
			public bool HasQue {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.que = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.que, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}

