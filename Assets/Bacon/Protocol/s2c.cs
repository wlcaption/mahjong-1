// Generated by sprotodump. DO NOT EDIT!
// source: ./../../../tool/s2c.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace S2cSprotoType { 
	public class call {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 5;
			
			
			private Int64 _last; // tag 0
			public Int64 last {
				get { return _last; }
				set { base.has_field.set_field (0, true); _last = value; }
			}
			public bool HasLast {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _lead; // tag 1
			public Int64 lead {
				get { return _lead; }
				set { base.has_field.set_field (1, true); _lead = value; }
			}
			public bool HasLead {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _your_turn; // tag 2
			public Int64 your_turn {
				get { return _your_turn; }
				set { base.has_field.set_field (2, true); _your_turn = value; }
			}
			public bool HasYour_turn {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _countdown; // tag 3
			public Int64 countdown {
				get { return _countdown; }
				set { base.has_field.set_field (3, true); _countdown = value; }
			}
			public bool HasCountdown {
				get { return base.has_field.has_field (3); }
			}

			private Int64 _opcode; // tag 4
			public Int64 opcode {
				get { return _opcode; }
				set { base.has_field.set_field (4, true); _opcode = value; }
			}
			public bool HasOpcode {
				get { return base.has_field.has_field (4); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.last = base.deserialize.read_integer ();
						break;
					case 1:
						this.lead = base.deserialize.read_integer ();
						break;
					case 2:
						this.your_turn = base.deserialize.read_integer ();
						break;
					case 3:
						this.countdown = base.deserialize.read_integer ();
						break;
					case 4:
						this.opcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.last, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.lead, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.your_turn, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.countdown, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.opcode, 4);
				}

				return base.serialize.close ();
			}
		}


	}


	public class gang {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _sid; // tag 0
			public Int64 sid {
				get { return _sid; }
				set { base.has_field.set_field (0, true); _sid = value; }
			}
			public bool HasSid {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _card; // tag 1
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (1, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.sid = base.deserialize.read_integer ();
						break;
					case 1:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.sid, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.card, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class handshake {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class hu {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _sid; // tag 0
			public Int64 sid {
				get { return _sid; }
				set { base.has_field.set_field (0, true); _sid = value; }
			}
			public bool HasSid {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _card; // tag 1
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (1, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.sid = base.deserialize.read_integer ();
						break;
					case 1:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.sid, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.card, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class leave {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _sid; // tag 0
			public Int64 sid {
				get { return _sid; }
				set { base.has_field.set_field (0, true); _sid = value; }
			}
			public bool HasSid {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.sid = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.sid, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class match {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _id; // tag 0
			public Int64 id {
				get { return _id; }
				set { base.has_field.set_field (0, true); _id = value; }
			}
			public bool HasId {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.id = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.id, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _index; // tag 2
		public Int64 index {
			get { return _index; }
			set { base.has_field.set_field (2, true); _index = value; }
		}
		public bool HasIndex {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _version; // tag 3
		public Int64 version {
			get { return _version; }
			set { base.has_field.set_field (3, true); _version = value; }
		}
		public bool HasVersion {
			get { return base.has_field.has_field (3); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				case 2:
					this.index = base.deserialize.read_integer ();
					break;
				case 3:
					this.version = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.index, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.version, 3);
			}

			return base.serialize.close ();
		}
	}


	public class peng {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _sid; // tag 0
			public Int64 sid {
				get { return _sid; }
				set { base.has_field.set_field (0, true); _sid = value; }
			}
			public bool HasSid {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _card; // tag 1
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (1, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.sid = base.deserialize.read_integer ();
						break;
					case 1:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.sid, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.card, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class player : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private string _name; // tag 0
		public string name {
			get { return _name; }
			set { base.has_field.set_field (0, true); _name = value; }
		}
		public bool HasName {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _orientation; // tag 1
		public Int64 orientation {
			get { return _orientation; }
			set { base.has_field.set_field (1, true); _orientation = value; }
		}
		public bool HasOrientation {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _sid; // tag 2
		public Int64 sid {
			get { return _sid; }
			set { base.has_field.set_field (2, true); _sid = value; }
		}
		public bool HasSid {
			get { return base.has_field.has_field (2); }
		}

		public player () : base(max_field_count) {}

		public player (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.name = base.deserialize.read_string ();
					break;
				case 1:
					this.orientation = base.deserialize.read_integer ();
					break;
				case 2:
					this.sid = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_string (this.name, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.orientation, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.sid, 2);
			}

			return base.serialize.close ();
		}
	}


	public class settlement : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _sid; // tag 0
		public Int64 sid {
			get { return _sid; }
			set { base.has_field.set_field (0, true); _sid = value; }
		}
		public bool HasSid {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _gold; // tag 1
		public Int64 gold {
			get { return _gold; }
			set { base.has_field.set_field (1, true); _gold = value; }
		}
		public bool HasGold {
			get { return base.has_field.has_field (1); }
		}

		public settlement () : base(max_field_count) {}

		public settlement (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.sid = base.deserialize.read_integer ();
					break;
				case 1:
					this.gold = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.sid, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.gold, 1);
			}

			return base.serialize.close ();
		}
	}


	public class take_turn {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 5;
			
			
			private Int64 _last; // tag 0
			public Int64 last {
				get { return _last; }
				set { base.has_field.set_field (0, true); _last = value; }
			}
			public bool HasLast {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _lead; // tag 1
			public Int64 lead {
				get { return _lead; }
				set { base.has_field.set_field (1, true); _lead = value; }
			}
			public bool HasLead {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _your_turn; // tag 2
			public Int64 your_turn {
				get { return _your_turn; }
				set { base.has_field.set_field (2, true); _your_turn = value; }
			}
			public bool HasYour_turn {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _countdown; // tag 3
			public Int64 countdown {
				get { return _countdown; }
				set { base.has_field.set_field (3, true); _countdown = value; }
			}
			public bool HasCountdown {
				get { return base.has_field.has_field (3); }
			}

			private Int64 _card; // tag 4
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (4, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (4); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.last = base.deserialize.read_integer ();
						break;
					case 1:
						this.lead = base.deserialize.read_integer ();
						break;
					case 2:
						this.your_turn = base.deserialize.read_integer ();
						break;
					case 3:
						this.countdown = base.deserialize.read_integer ();
						break;
					case 4:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.last, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.lead, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.your_turn, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.countdown, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.card, 4);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}

