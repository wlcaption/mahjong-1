// Generated by sprotodump. DO NOT EDIT!
// source: ./../../../tool/c2s.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace C2sSprotoType { 
	public class call {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private opinfo _op; // tag 0
			public opinfo op {
				get { return _op; }
				set { base.has_field.set_field (0, true); _op = value; }
			}
			public bool HasOp {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.op = base.deserialize.read_obj<opinfo> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.op, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class checkindaily {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class cmatch {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class create {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _provice; // tag 0
			public Int64 provice {
				get { return _provice; }
				set { base.has_field.set_field (0, true); _provice = value; }
			}
			public bool HasProvice {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _ju; // tag 1
			public Int64 ju {
				get { return _ju; }
				set { base.has_field.set_field (1, true); _ju = value; }
			}
			public bool HasJu {
				get { return base.has_field.has_field (1); }
			}

			private crsc _sc; // tag 2
			public crsc sc {
				get { return _sc; }
				set { base.has_field.set_field (2, true); _sc = value; }
			}
			public bool HasSc {
				get { return base.has_field.has_field (2); }
			}

			private crsx _sx; // tag 3
			public crsx sx {
				get { return _sx; }
				set { base.has_field.set_field (3, true); _sx = value; }
			}
			public bool HasSx {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.provice = base.deserialize.read_integer ();
						break;
					case 1:
						this.ju = base.deserialize.read_integer ();
						break;
					case 2:
						this.sc = base.deserialize.read_obj<crsc> ();
						break;
					case 3:
						this.sx = base.deserialize.read_obj<crsx> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.provice, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.ju, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.sc, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_obj (this.sx, 3);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _roomid; // tag 1
			public Int64 roomid {
				get { return _roomid; }
				set { base.has_field.set_field (1, true); _roomid = value; }
			}
			public bool HasRoomid {
				get { return base.has_field.has_field (1); }
			}

			private player _me; // tag 2
			public player me {
				get { return _me; }
				set { base.has_field.set_field (2, true); _me = value; }
			}
			public bool HasMe {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.roomid = base.deserialize.read_integer ();
						break;
					case 2:
						this.me = base.deserialize.read_obj<player> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.roomid, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.me, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class crsc : SprotoTypeBase {
		private static int max_field_count = 8;
		
		
		private Int64 _hujiaozhuanyi; // tag 0
		public Int64 hujiaozhuanyi {
			get { return _hujiaozhuanyi; }
			set { base.has_field.set_field (0, true); _hujiaozhuanyi = value; }
		}
		public bool HasHujiaozhuanyi {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _zimo; // tag 1
		public Int64 zimo {
			get { return _zimo; }
			set { base.has_field.set_field (1, true); _zimo = value; }
		}
		public bool HasZimo {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _dianganghua; // tag 2
		public Int64 dianganghua {
			get { return _dianganghua; }
			set { base.has_field.set_field (2, true); _dianganghua = value; }
		}
		public bool HasDianganghua {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _daiyaojiu; // tag 3
		public Int64 daiyaojiu {
			get { return _daiyaojiu; }
			set { base.has_field.set_field (3, true); _daiyaojiu = value; }
		}
		public bool HasDaiyaojiu {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _duanyaojiu; // tag 4
		public Int64 duanyaojiu {
			get { return _duanyaojiu; }
			set { base.has_field.set_field (4, true); _duanyaojiu = value; }
		}
		public bool HasDuanyaojiu {
			get { return base.has_field.has_field (4); }
		}

		private Int64 _jiangdui; // tag 5
		public Int64 jiangdui {
			get { return _jiangdui; }
			set { base.has_field.set_field (5, true); _jiangdui = value; }
		}
		public bool HasJiangdui {
			get { return base.has_field.has_field (5); }
		}

		private Int64 _tiandihu; // tag 6
		public Int64 tiandihu {
			get { return _tiandihu; }
			set { base.has_field.set_field (6, true); _tiandihu = value; }
		}
		public bool HasTiandihu {
			get { return base.has_field.has_field (6); }
		}

		private Int64 _top; // tag 7
		public Int64 top {
			get { return _top; }
			set { base.has_field.set_field (7, true); _top = value; }
		}
		public bool HasTop {
			get { return base.has_field.has_field (7); }
		}

		public crsc () : base(max_field_count) {}

		public crsc (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.hujiaozhuanyi = base.deserialize.read_integer ();
					break;
				case 1:
					this.zimo = base.deserialize.read_integer ();
					break;
				case 2:
					this.dianganghua = base.deserialize.read_integer ();
					break;
				case 3:
					this.daiyaojiu = base.deserialize.read_integer ();
					break;
				case 4:
					this.duanyaojiu = base.deserialize.read_integer ();
					break;
				case 5:
					this.jiangdui = base.deserialize.read_integer ();
					break;
				case 6:
					this.tiandihu = base.deserialize.read_integer ();
					break;
				case 7:
					this.top = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.hujiaozhuanyi, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.zimo, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.dianganghua, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.daiyaojiu, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.duanyaojiu, 4);
			}

			if (base.has_field.has_field (5)) {
				base.serialize.write_integer (this.jiangdui, 5);
			}

			if (base.has_field.has_field (6)) {
				base.serialize.write_integer (this.tiandihu, 6);
			}

			if (base.has_field.has_field (7)) {
				base.serialize.write_integer (this.top, 7);
			}

			return base.serialize.close ();
		}
	}


	public class crsx : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _huqidui; // tag 0
		public Int64 huqidui {
			get { return _huqidui; }
			set { base.has_field.set_field (0, true); _huqidui = value; }
		}
		public bool HasHuqidui {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _qingyise; // tag 1
		public Int64 qingyise {
			get { return _qingyise; }
			set { base.has_field.set_field (1, true); _qingyise = value; }
		}
		public bool HasQingyise {
			get { return base.has_field.has_field (1); }
		}

		public crsx () : base(max_field_count) {}

		public crsx (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.huqidui = base.deserialize.read_integer ();
					break;
				case 1:
					this.qingyise = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.huqidui, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.qingyise, 1);
			}

			return base.serialize.close ();
		}
	}


	public class dice {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _d1; // tag 1
			public Int64 d1 {
				get { return _d1; }
				set { base.has_field.set_field (1, true); _d1 = value; }
			}
			public bool HasD1 {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _d2; // tag 2
			public Int64 d2 {
				get { return _d2; }
				set { base.has_field.set_field (2, true); _d2 = value; }
			}
			public bool HasD2 {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.d1 = base.deserialize.read_integer ();
						break;
					case 2:
						this.d2 = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.d1, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.d2, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class fetchsysmail {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _datetime; // tag 0
			public Int64 datetime {
				get { return _datetime; }
				set { base.has_field.set_field (0, true); _datetime = value; }
			}
			public bool HasDatetime {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.datetime = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.datetime, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _noviewed; // tag 1
			public Int64 noviewed {
				get { return _noviewed; }
				set { base.has_field.set_field (1, true); _noviewed = value; }
			}
			public bool HasNoviewed {
				get { return base.has_field.has_field (1); }
			}

			private List<sysmail> _inbox; // tag 2
			public List<sysmail> inbox {
				get { return _inbox; }
				set { base.has_field.set_field (2, true); _inbox = value; }
			}
			public bool HasInbox {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.noviewed = base.deserialize.read_integer ();
						break;
					case 2:
						this.inbox = base.deserialize.read_obj_list<sysmail> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.noviewed, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.inbox, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class fetchsysmail1 {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _datetime; // tag 0
			public Int64 datetime {
				get { return _datetime; }
				set { base.has_field.set_field (0, true); _datetime = value; }
			}
			public bool HasDatetime {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.datetime = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.datetime, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _noviewed; // tag 1
			public Int64 noviewed {
				get { return _noviewed; }
				set { base.has_field.set_field (1, true); _noviewed = value; }
			}
			public bool HasNoviewed {
				get { return base.has_field.has_field (1); }
			}

			private List<sysmail> _inbox; // tag 2
			public List<sysmail> inbox {
				get { return _inbox; }
				set { base.has_field.set_field (2, true); _inbox = value; }
			}
			public bool HasInbox {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.noviewed = base.deserialize.read_integer ();
						break;
					case 2:
						this.inbox = base.deserialize.read_obj_list<sysmail> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.noviewed, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.inbox, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class first {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 7;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private string _name; // tag 1
			public string name {
				get { return _name; }
				set { base.has_field.set_field (1, true); _name = value; }
			}
			public bool HasName {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _nameid; // tag 2
			public Int64 nameid {
				get { return _nameid; }
				set { base.has_field.set_field (2, true); _nameid = value; }
			}
			public bool HasNameid {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _rcard; // tag 3
			public Int64 rcard {
				get { return _rcard; }
				set { base.has_field.set_field (3, true); _rcard = value; }
			}
			public bool HasRcard {
				get { return base.has_field.has_field (3); }
			}

			private string _board; // tag 4
			public string board {
				get { return _board; }
				set { base.has_field.set_field (4, true); _board = value; }
			}
			public bool HasBoard {
				get { return base.has_field.has_field (4); }
			}

			private string _adver; // tag 5
			public string adver {
				get { return _adver; }
				set { base.has_field.set_field (5, true); _adver = value; }
			}
			public bool HasAdver {
				get { return base.has_field.has_field (5); }
			}

			private Int64 _msgnum; // tag 6
			public Int64 msgnum {
				get { return _msgnum; }
				set { base.has_field.set_field (6, true); _msgnum = value; }
			}
			public bool HasMsgnum {
				get { return base.has_field.has_field (6); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.name = base.deserialize.read_string ();
						break;
					case 2:
						this.nameid = base.deserialize.read_integer ();
						break;
					case 3:
						this.rcard = base.deserialize.read_integer ();
						break;
					case 4:
						this.board = base.deserialize.read_string ();
						break;
					case 5:
						this.adver = base.deserialize.read_string ();
						break;
					case 6:
						this.msgnum = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.name, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.nameid, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.rcard, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_string (this.board, 4);
				}

				if (base.has_field.has_field (5)) {
					base.serialize.write_string (this.adver, 5);
				}

				if (base.has_field.has_field (6)) {
					base.serialize.write_integer (this.msgnum, 6);
				}

				return base.serialize.close ();
			}
		}


	}


	public class handshake {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class huinfo : SprotoTypeBase {
		private static int max_field_count = 5;
		
		
		private Int64 _idx; // tag 0
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (0, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _card; // tag 1
		public Int64 card {
			get { return _card; }
			set { base.has_field.set_field (1, true); _card = value; }
		}
		public bool HasCard {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _code; // tag 2
		public Int64 code {
			get { return _code; }
			set { base.has_field.set_field (2, true); _code = value; }
		}
		public bool HasCode {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _jiao; // tag 3
		public Int64 jiao {
			get { return _jiao; }
			set { base.has_field.set_field (3, true); _jiao = value; }
		}
		public bool HasJiao {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _dian; // tag 4
		public Int64 dian {
			get { return _dian; }
			set { base.has_field.set_field (4, true); _dian = value; }
		}
		public bool HasDian {
			get { return base.has_field.has_field (4); }
		}

		public huinfo () : base(max_field_count) {}

		public huinfo (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.idx = base.deserialize.read_integer ();
					break;
				case 1:
					this.card = base.deserialize.read_integer ();
					break;
				case 2:
					this.code = base.deserialize.read_integer ();
					break;
				case 3:
					this.jiao = base.deserialize.read_integer ();
					break;
				case 4:
					this.dian = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.idx, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.card, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.code, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.jiao, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.dian, 4);
			}

			return base.serialize.close ();
		}
	}


	public class inbox : SprotoTypeBase {
		private static int max_field_count = 1;
		
		
		private mail _all; // tag 0
		public mail all {
			get { return _all; }
			set { base.has_field.set_field (0, true); _all = value; }
		}
		public bool HasAll {
			get { return base.has_field.has_field (0); }
		}

		public inbox () : base(max_field_count) {}

		public inbox (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.all = base.deserialize.read_obj<mail> ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_obj (this.all, 0);
			}

			return base.serialize.close ();
		}
	}


	public class join {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _roomid; // tag 0
			public Int64 roomid {
				get { return _roomid; }
				set { base.has_field.set_field (0, true); _roomid = value; }
			}
			public bool HasRoomid {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.roomid = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.roomid, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private List<player> _ps; // tag 1
			public List<player> ps {
				get { return _ps; }
				set { base.has_field.set_field (1, true); _ps = value; }
			}
			public bool HasPs {
				get { return base.has_field.has_field (1); }
			}

			private player _me; // tag 2
			public player me {
				get { return _me; }
				set { base.has_field.set_field (2, true); _me = value; }
			}
			public bool HasMe {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _roomid; // tag 3
			public Int64 roomid {
				get { return _roomid; }
				set { base.has_field.set_field (3, true); _roomid = value; }
			}
			public bool HasRoomid {
				get { return base.has_field.has_field (3); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.ps = base.deserialize.read_obj_list<player> ();
						break;
					case 2:
						this.me = base.deserialize.read_obj<player> ();
						break;
					case 3:
						this.roomid = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.ps, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.me, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.roomid, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class lead {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _card; // tag 1
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (1, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.card, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class leave {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class mail : SprotoTypeBase {
		private static int max_field_count = 5;
		
		
		private Int64 _id; // tag 0
		public Int64 id {
			get { return _id; }
			set { base.has_field.set_field (0, true); _id = value; }
		}
		public bool HasId {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _from; // tag 1
		public Int64 from {
			get { return _from; }
			set { base.has_field.set_field (1, true); _from = value; }
		}
		public bool HasFrom {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _to; // tag 2
		public Int64 to {
			get { return _to; }
			set { base.has_field.set_field (2, true); _to = value; }
		}
		public bool HasTo {
			get { return base.has_field.has_field (2); }
		}

		private string _title; // tag 3
		public string title {
			get { return _title; }
			set { base.has_field.set_field (3, true); _title = value; }
		}
		public bool HasTitle {
			get { return base.has_field.has_field (3); }
		}

		private string _content; // tag 4
		public string content {
			get { return _content; }
			set { base.has_field.set_field (4, true); _content = value; }
		}
		public bool HasContent {
			get { return base.has_field.has_field (4); }
		}

		public mail () : base(max_field_count) {}

		public mail (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.id = base.deserialize.read_integer ();
					break;
				case 1:
					this.from = base.deserialize.read_integer ();
					break;
				case 2:
					this.to = base.deserialize.read_integer ();
					break;
				case 3:
					this.title = base.deserialize.read_string ();
					break;
				case 4:
					this.content = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.id, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.from, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.to, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_string (this.title, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_string (this.content, 4);
			}

			return base.serialize.close ();
		}
	}


	public class match {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _rule; // tag 0
			public Int64 rule {
				get { return _rule; }
				set { base.has_field.set_field (0, true); _rule = value; }
			}
			public bool HasRule {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _mode; // tag 1
			public Int64 mode {
				get { return _mode; }
				set { base.has_field.set_field (1, true); _mode = value; }
			}
			public bool HasMode {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _scene; // tag 2
			public Int64 scene {
				get { return _scene; }
				set { base.has_field.set_field (2, true); _scene = value; }
			}
			public bool HasScene {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.rule = base.deserialize.read_integer ();
						break;
					case 1:
						this.mode = base.deserialize.read_integer ();
						break;
					case 2:
						this.scene = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.rule, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.mode, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.scene, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class opinfo : SprotoTypeBase {
		private static int max_field_count = 7;
		
		
		private Int64 _idx; // tag 0
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (0, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _card; // tag 1
		public Int64 card {
			get { return _card; }
			set { base.has_field.set_field (1, true); _card = value; }
		}
		public bool HasCard {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _dian; // tag 2
		public Int64 dian {
			get { return _dian; }
			set { base.has_field.set_field (2, true); _dian = value; }
		}
		public bool HasDian {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _guo; // tag 3
		public Int64 guo {
			get { return _guo; }
			set { base.has_field.set_field (3, true); _guo = value; }
		}
		public bool HasGuo {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _peng; // tag 4
		public Int64 peng {
			get { return _peng; }
			set { base.has_field.set_field (4, true); _peng = value; }
		}
		public bool HasPeng {
			get { return base.has_field.has_field (4); }
		}

		private Int64 _gang; // tag 5
		public Int64 gang {
			get { return _gang; }
			set { base.has_field.set_field (5, true); _gang = value; }
		}
		public bool HasGang {
			get { return base.has_field.has_field (5); }
		}

		private huinfo _hu; // tag 6
		public huinfo hu {
			get { return _hu; }
			set { base.has_field.set_field (6, true); _hu = value; }
		}
		public bool HasHu {
			get { return base.has_field.has_field (6); }
		}

		public opinfo () : base(max_field_count) {}

		public opinfo (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.idx = base.deserialize.read_integer ();
					break;
				case 1:
					this.card = base.deserialize.read_integer ();
					break;
				case 2:
					this.dian = base.deserialize.read_integer ();
					break;
				case 3:
					this.guo = base.deserialize.read_integer ();
					break;
				case 4:
					this.peng = base.deserialize.read_integer ();
					break;
				case 5:
					this.gang = base.deserialize.read_integer ();
					break;
				case 6:
					this.hu = base.deserialize.read_obj<huinfo> ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.idx, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.card, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.dian, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.guo, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.peng, 4);
			}

			if (base.has_field.has_field (5)) {
				base.serialize.write_integer (this.gang, 5);
			}

			if (base.has_field.has_field (6)) {
				base.serialize.write_obj (this.hu, 6);
			}

			return base.serialize.close ();
		}
	}


	public class outbox : SprotoTypeBase {
		private static int max_field_count = 1;
		
		
		private mail _all; // tag 0
		public mail all {
			get { return _all; }
			set { base.has_field.set_field (0, true); _all = value; }
		}
		public bool HasAll {
			get { return base.has_field.has_field (0); }
		}

		public outbox () : base(max_field_count) {}

		public outbox (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.all = base.deserialize.read_obj<mail> ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_obj (this.all, 0);
			}

			return base.serialize.close ();
		}
	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _index; // tag 2
		public Int64 index {
			get { return _index; }
			set { base.has_field.set_field (2, true); _index = value; }
		}
		public bool HasIndex {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _version; // tag 3
		public Int64 version {
			get { return _version; }
			set { base.has_field.set_field (3, true); _version = value; }
		}
		public bool HasVersion {
			get { return base.has_field.has_field (3); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				case 2:
					this.index = base.deserialize.read_integer ();
					break;
				case 3:
					this.version = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.index, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.version, 3);
			}

			return base.serialize.close ();
		}
	}


	public class player : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private string _name; // tag 0
		public string name {
			get { return _name; }
			set { base.has_field.set_field (0, true); _name = value; }
		}
		public bool HasName {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _idx; // tag 1
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (1, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _sid; // tag 2
		public Int64 sid {
			get { return _sid; }
			set { base.has_field.set_field (2, true); _sid = value; }
		}
		public bool HasSid {
			get { return base.has_field.has_field (2); }
		}

		public player () : base(max_field_count) {}

		public player (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.name = base.deserialize.read_string ();
					break;
				case 1:
					this.idx = base.deserialize.read_integer ();
					break;
				case 2:
					this.sid = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_string (this.name, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.idx, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.sid, 2);
			}

			return base.serialize.close ();
		}
	}


	public class rchat {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _type; // tag 1
			public Int64 type {
				get { return _type; }
				set { base.has_field.set_field (1, true); _type = value; }
			}
			public bool HasType {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _textid; // tag 2
			public Int64 textid {
				get { return _textid; }
				set { base.has_field.set_field (2, true); _textid = value; }
			}
			public bool HasTextid {
				get { return base.has_field.has_field (2); }
			}

			private string _sdsteam; // tag 3
			public string sdsteam {
				get { return _sdsteam; }
				set { base.has_field.set_field (3, true); _sdsteam = value; }
			}
			public bool HasSdsteam {
				get { return base.has_field.has_field (3); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.type = base.deserialize.read_integer ();
						break;
					case 2:
						this.textid = base.deserialize.read_integer ();
						break;
					case 3:
						this.sdsteam = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.type, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.textid, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_string (this.sdsteam, 3);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class record {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _id; // tag 0
			public Int64 id {
				get { return _id; }
				set { base.has_field.set_field (0, true); _id = value; }
			}
			public bool HasId {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.id = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.id, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private string _r; // tag 1
			public string r {
				get { return _r; }
				set { base.has_field.set_field (1, true); _r = value; }
			}
			public bool HasR {
				get { return base.has_field.has_field (1); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.r = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.r, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class records {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class restart {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class settlement : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _uid; // tag 0
		public Int64 uid {
			get { return _uid; }
			set { base.has_field.set_field (0, true); _uid = value; }
		}
		public bool HasUid {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _gold; // tag 1
		public Int64 gold {
			get { return _gold; }
			set { base.has_field.set_field (1, true); _gold = value; }
		}
		public bool HasGold {
			get { return base.has_field.has_field (1); }
		}

		public settlement () : base(max_field_count) {}

		public settlement (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.uid = base.deserialize.read_integer ();
					break;
				case 1:
					this.gold = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.uid, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.gold, 1);
			}

			return base.serialize.close ();
		}
	}


	public class shuffle {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class step {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class sysmail : SprotoTypeBase {
		private static int max_field_count = 5;
		
		
		private Int64 _id; // tag 0
		public Int64 id {
			get { return _id; }
			set { base.has_field.set_field (0, true); _id = value; }
		}
		public bool HasId {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _datetime; // tag 1
		public Int64 datetime {
			get { return _datetime; }
			set { base.has_field.set_field (1, true); _datetime = value; }
		}
		public bool HasDatetime {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _viewed; // tag 2
		public Int64 viewed {
			get { return _viewed; }
			set { base.has_field.set_field (2, true); _viewed = value; }
		}
		public bool HasViewed {
			get { return base.has_field.has_field (2); }
		}

		private string _title; // tag 3
		public string title {
			get { return _title; }
			set { base.has_field.set_field (3, true); _title = value; }
		}
		public bool HasTitle {
			get { return base.has_field.has_field (3); }
		}

		private string _content; // tag 4
		public string content {
			get { return _content; }
			set { base.has_field.set_field (4, true); _content = value; }
		}
		public bool HasContent {
			get { return base.has_field.has_field (4); }
		}

		public sysmail () : base(max_field_count) {}

		public sysmail (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.id = base.deserialize.read_integer ();
					break;
				case 1:
					this.datetime = base.deserialize.read_integer ();
					break;
				case 2:
					this.viewed = base.deserialize.read_integer ();
					break;
				case 3:
					this.title = base.deserialize.read_string ();
					break;
				case 4:
					this.content = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.id, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.datetime, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.viewed, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_string (this.title, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_string (this.content, 4);
			}

			return base.serialize.close ();
		}
	}


	public class toast1 {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private string _text; // tag 1
			public string text {
				get { return _text; }
				set { base.has_field.set_field (1, true); _text = value; }
			}
			public bool HasText {
				get { return base.has_field.has_field (1); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.text = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.text, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class toast2 {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class xuanpao {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _fen; // tag 1
			public Int64 fen {
				get { return _fen; }
				set { base.has_field.set_field (1, true); _fen = value; }
			}
			public bool HasFen {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.fen = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.fen, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class xuanque {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _que; // tag 1
			public Int64 que {
				get { return _que; }
				set { base.has_field.set_field (1, true); _que = value; }
			}
			public bool HasQue {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.que = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.que, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}

