// Generated by sprotodump. DO NOT EDIT!
// source: ./../../../tool/c2s.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace C2sSprotoType { 
	public class call {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _opcode; // tag 1
			public Int64 opcode {
				get { return _opcode; }
				set { base.has_field.set_field (1, true); _opcode = value; }
			}
			public bool HasOpcode {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _card; // tag 2
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (2, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.opcode = base.deserialize.read_integer ();
						break;
					case 2:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.opcode, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.card, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class checkindaily {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class cmatch {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class create {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _count; // tag 0
			public Int64 count {
				get { return _count; }
				set { base.has_field.set_field (0, true); _count = value; }
			}
			public bool HasCount {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _rule; // tag 1
			public Int64 rule {
				get { return _rule; }
				set { base.has_field.set_field (1, true); _rule = value; }
			}
			public bool HasRule {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.count = base.deserialize.read_integer ();
						break;
					case 1:
						this.rule = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.count, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.rule, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _roomid; // tag 1
			public Int64 roomid {
				get { return _roomid; }
				set { base.has_field.set_field (1, true); _roomid = value; }
			}
			public bool HasRoomid {
				get { return base.has_field.has_field (1); }
			}

			private player _me; // tag 2
			public player me {
				get { return _me; }
				set { base.has_field.set_field (2, true); _me = value; }
			}
			public bool HasMe {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.roomid = base.deserialize.read_integer ();
						break;
					case 2:
						this.me = base.deserialize.read_obj<player> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.roomid, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.me, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class dice {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _d1; // tag 1
			public Int64 d1 {
				get { return _d1; }
				set { base.has_field.set_field (1, true); _d1 = value; }
			}
			public bool HasD1 {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _d2; // tag 2
			public Int64 d2 {
				get { return _d2; }
				set { base.has_field.set_field (2, true); _d2 = value; }
			}
			public bool HasD2 {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.d1 = base.deserialize.read_integer ();
						break;
					case 2:
						this.d2 = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.d1, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.d2, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class first {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 10;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private outbox _outbox; // tag 1
			public outbox outbox {
				get { return _outbox; }
				set { base.has_field.set_field (1, true); _outbox = value; }
			}
			public bool HasOutbox {
				get { return base.has_field.has_field (1); }
			}

			private inbox _inbox; // tag 2
			public inbox inbox {
				get { return _inbox; }
				set { base.has_field.set_field (2, true); _inbox = value; }
			}
			public bool HasInbox {
				get { return base.has_field.has_field (2); }
			}

			private string _name; // tag 3
			public string name {
				get { return _name; }
				set { base.has_field.set_field (3, true); _name = value; }
			}
			public bool HasName {
				get { return base.has_field.has_field (3); }
			}

			private Int64 _gold; // tag 4
			public Int64 gold {
				get { return _gold; }
				set { base.has_field.set_field (4, true); _gold = value; }
			}
			public bool HasGold {
				get { return base.has_field.has_field (4); }
			}

			private Int64 _diamond; // tag 5
			public Int64 diamond {
				get { return _diamond; }
				set { base.has_field.set_field (5, true); _diamond = value; }
			}
			public bool HasDiamond {
				get { return base.has_field.has_field (5); }
			}

			private bool _checkin_today; // tag 6
			public bool checkin_today {
				get { return _checkin_today; }
				set { base.has_field.set_field (6, true); _checkin_today = value; }
			}
			public bool HasCheckin_today {
				get { return base.has_field.has_field (6); }
			}

			private Int64 _checkin_cm; // tag 7
			public Int64 checkin_cm {
				get { return _checkin_cm; }
				set { base.has_field.set_field (7, true); _checkin_cm = value; }
			}
			public bool HasCheckin_cm {
				get { return base.has_field.has_field (7); }
			}

			private Int64 _checkin_cmcnt; // tag 8
			public Int64 checkin_cmcnt {
				get { return _checkin_cmcnt; }
				set { base.has_field.set_field (8, true); _checkin_cmcnt = value; }
			}
			public bool HasCheckin_cmcnt {
				get { return base.has_field.has_field (8); }
			}

			private Int64 _checkin_cnt; // tag 9
			public Int64 checkin_cnt {
				get { return _checkin_cnt; }
				set { base.has_field.set_field (9, true); _checkin_cnt = value; }
			}
			public bool HasCheckin_cnt {
				get { return base.has_field.has_field (9); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.outbox = base.deserialize.read_obj<outbox> ();
						break;
					case 2:
						this.inbox = base.deserialize.read_obj<inbox> ();
						break;
					case 3:
						this.name = base.deserialize.read_string ();
						break;
					case 4:
						this.gold = base.deserialize.read_integer ();
						break;
					case 5:
						this.diamond = base.deserialize.read_integer ();
						break;
					case 6:
						this.checkin_today = base.deserialize.read_boolean ();
						break;
					case 7:
						this.checkin_cm = base.deserialize.read_integer ();
						break;
					case 8:
						this.checkin_cmcnt = base.deserialize.read_integer ();
						break;
					case 9:
						this.checkin_cnt = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.outbox, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.inbox, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_string (this.name, 3);
				}

				if (base.has_field.has_field (4)) {
					base.serialize.write_integer (this.gold, 4);
				}

				if (base.has_field.has_field (5)) {
					base.serialize.write_integer (this.diamond, 5);
				}

				if (base.has_field.has_field (6)) {
					base.serialize.write_boolean (this.checkin_today, 6);
				}

				if (base.has_field.has_field (7)) {
					base.serialize.write_integer (this.checkin_cm, 7);
				}

				if (base.has_field.has_field (8)) {
					base.serialize.write_integer (this.checkin_cmcnt, 8);
				}

				if (base.has_field.has_field (9)) {
					base.serialize.write_integer (this.checkin_cnt, 9);
				}

				return base.serialize.close ();
			}
		}


	}


	public class handshake {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class inbox : SprotoTypeBase {
		private static int max_field_count = 1;
		
		
		private mail _all; // tag 0
		public mail all {
			get { return _all; }
			set { base.has_field.set_field (0, true); _all = value; }
		}
		public bool HasAll {
			get { return base.has_field.has_field (0); }
		}

		public inbox () : base(max_field_count) {}

		public inbox (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.all = base.deserialize.read_obj<mail> ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_obj (this.all, 0);
			}

			return base.serialize.close ();
		}
	}


	public class join {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _roomid; // tag 0
			public Int64 roomid {
				get { return _roomid; }
				set { base.has_field.set_field (0, true); _roomid = value; }
			}
			public bool HasRoomid {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.roomid = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.roomid, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			private List<player> _ps; // tag 1
			public List<player> ps {
				get { return _ps; }
				set { base.has_field.set_field (1, true); _ps = value; }
			}
			public bool HasPs {
				get { return base.has_field.has_field (1); }
			}

			private player _me; // tag 2
			public player me {
				get { return _me; }
				set { base.has_field.set_field (2, true); _me = value; }
			}
			public bool HasMe {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _roomid; // tag 3
			public Int64 roomid {
				get { return _roomid; }
				set { base.has_field.set_field (3, true); _roomid = value; }
			}
			public bool HasRoomid {
				get { return base.has_field.has_field (3); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					case 1:
						this.ps = base.deserialize.read_obj_list<player> ();
						break;
					case 2:
						this.me = base.deserialize.read_obj<player> ();
						break;
					case 3:
						this.roomid = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.ps, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.me, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.roomid, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class lead {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _card; // tag 1
			public Int64 card {
				get { return _card; }
				set { base.has_field.set_field (1, true); _card = value; }
			}
			public bool HasCard {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					case 1:
						this.card = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.card, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class leave {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class mail : SprotoTypeBase {
		private static int max_field_count = 5;
		
		
		private Int64 _id; // tag 0
		public Int64 id {
			get { return _id; }
			set { base.has_field.set_field (0, true); _id = value; }
		}
		public bool HasId {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _from; // tag 1
		public Int64 from {
			get { return _from; }
			set { base.has_field.set_field (1, true); _from = value; }
		}
		public bool HasFrom {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _to; // tag 2
		public Int64 to {
			get { return _to; }
			set { base.has_field.set_field (2, true); _to = value; }
		}
		public bool HasTo {
			get { return base.has_field.has_field (2); }
		}

		private string _title; // tag 3
		public string title {
			get { return _title; }
			set { base.has_field.set_field (3, true); _title = value; }
		}
		public bool HasTitle {
			get { return base.has_field.has_field (3); }
		}

		private string _content; // tag 4
		public string content {
			get { return _content; }
			set { base.has_field.set_field (4, true); _content = value; }
		}
		public bool HasContent {
			get { return base.has_field.has_field (4); }
		}

		public mail () : base(max_field_count) {}

		public mail (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.id = base.deserialize.read_integer ();
					break;
				case 1:
					this.from = base.deserialize.read_integer ();
					break;
				case 2:
					this.to = base.deserialize.read_integer ();
					break;
				case 3:
					this.title = base.deserialize.read_string ();
					break;
				case 4:
					this.content = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.id, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.from, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.to, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_string (this.title, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_string (this.content, 4);
			}

			return base.serialize.close ();
		}
	}


	public class match {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _rule; // tag 0
			public Int64 rule {
				get { return _rule; }
				set { base.has_field.set_field (0, true); _rule = value; }
			}
			public bool HasRule {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _mode; // tag 1
			public Int64 mode {
				get { return _mode; }
				set { base.has_field.set_field (1, true); _mode = value; }
			}
			public bool HasMode {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _scene; // tag 2
			public Int64 scene {
				get { return _scene; }
				set { base.has_field.set_field (2, true); _scene = value; }
			}
			public bool HasScene {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.rule = base.deserialize.read_integer ();
						break;
					case 1:
						this.mode = base.deserialize.read_integer ();
						break;
					case 2:
						this.scene = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.rule, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.mode, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.scene, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class outbox : SprotoTypeBase {
		private static int max_field_count = 1;
		
		
		private mail _all; // tag 0
		public mail all {
			get { return _all; }
			set { base.has_field.set_field (0, true); _all = value; }
		}
		public bool HasAll {
			get { return base.has_field.has_field (0); }
		}

		public outbox () : base(max_field_count) {}

		public outbox (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.all = base.deserialize.read_obj<mail> ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_obj (this.all, 0);
			}

			return base.serialize.close ();
		}
	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _index; // tag 2
		public Int64 index {
			get { return _index; }
			set { base.has_field.set_field (2, true); _index = value; }
		}
		public bool HasIndex {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _version; // tag 3
		public Int64 version {
			get { return _version; }
			set { base.has_field.set_field (3, true); _version = value; }
		}
		public bool HasVersion {
			get { return base.has_field.has_field (3); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				case 2:
					this.index = base.deserialize.read_integer ();
					break;
				case 3:
					this.version = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.index, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.version, 3);
			}

			return base.serialize.close ();
		}
	}


	public class player : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private string _name; // tag 0
		public string name {
			get { return _name; }
			set { base.has_field.set_field (0, true); _name = value; }
		}
		public bool HasName {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _idx; // tag 1
		public Int64 idx {
			get { return _idx; }
			set { base.has_field.set_field (1, true); _idx = value; }
		}
		public bool HasIdx {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _sid; // tag 2
		public Int64 sid {
			get { return _sid; }
			set { base.has_field.set_field (2, true); _sid = value; }
		}
		public bool HasSid {
			get { return base.has_field.has_field (2); }
		}

		public player () : base(max_field_count) {}

		public player (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.name = base.deserialize.read_string ();
					break;
				case 1:
					this.idx = base.deserialize.read_integer ();
					break;
				case 2:
					this.sid = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_string (this.name, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.idx, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.sid, 2);
			}

			return base.serialize.close ();
		}
	}


	public class settlement : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _uid; // tag 0
		public Int64 uid {
			get { return _uid; }
			set { base.has_field.set_field (0, true); _uid = value; }
		}
		public bool HasUid {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _gold; // tag 1
		public Int64 gold {
			get { return _gold; }
			set { base.has_field.set_field (1, true); _gold = value; }
		}
		public bool HasGold {
			get { return base.has_field.has_field (1); }
		}

		public settlement () : base(max_field_count) {}

		public settlement (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.uid = base.deserialize.read_integer ();
					break;
				case 1:
					this.gold = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.uid, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.gold, 1);
			}

			return base.serialize.close ();
		}
	}


	public class shuffle {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class step {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _idx; // tag 0
			public Int64 idx {
				get { return _idx; }
				set { base.has_field.set_field (0, true); _idx = value; }
			}
			public bool HasIdx {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.idx = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.idx, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _errorcode; // tag 0
			public Int64 errorcode {
				get { return _errorcode; }
				set { base.has_field.set_field (0, true); _errorcode = value; }
			}
			public bool HasErrorcode {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.errorcode = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.errorcode, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}

